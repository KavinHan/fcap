from {{ project_name }}.extends import redis_store
from {{ project_name }}.utils import encode, decode, sha1_hash, to_string
import time


def get_token(token):
    key = 'token:{}'.format(token)
    return redis_store.get(key)


def set_token(user_id, token, ttl=15 * 60):
    key = 'token:{}'.format(token)
    redis_store.set(key, user_id, ttl)


def has_token(token):
    """ 判断token是否存在"""
    key = 'token:{}'.format(token)
    if redis_store.exists(key):
        return True
    else:
        return False


def refresh_token(token, ttl=15 * 60):
    """ 刷新token
    :param user_id: 用户id
    :param ttl: token时效
    """
    key = 'token:{}'.format(token)
    if has_token(token):
        redis_store.expire(key, ttl)


def make_api_token(app_id, app_secret, ttl=7200):
    key = 'api_token:{}'.format(app_id)
    timestamp = str(int(time.time()))
    token_hash = sha1_hash(app_id + app_secret + timestamp)
    redis_store.set(key, token_hash, ttl)
    return encode(token_hash) + b'.' + encode(app_id)


def validate_api_token(token):
    """ 验证api token"""
    _token_hash, _app_id = token.split('.')
    token_hash, app_id = decode(_token_hash), decode(_app_id)
    key = 'api_token:{}'.format(to_string(app_id))
    if redis_store.exists(key):
        value = redis_store.get(key)
        if value == token_hash:
            return True
    return False

